import re
from typing import Any

from celery import Task, group
from celery.result import AsyncResult

class PubSubManager:
    subscribed: set[tuple[str, re.Pattern[str], Task[Any, Any]]]
    jobs: dict[str, group]
    def publish(self, topic: str, *args: Any, **kwargs: Any) -> AsyncResult[Any]: ...
    def publish_now(
        self, topic: str, *args: Any, **kwargs: Any
    ) -> AsyncResult[Any]: ...
    def subscribe(self, topic: str, task: Task[Any, Any]) -> None: ...
    def unsubscribe(self, topic: str, task: Task[Any, Any]) -> None: ...
    def get_jobs(self, topic: str) -> group: ...

def publish(topic: str, *args: Any, **kwargs: Any) -> AsyncResult[Any]: ...
def publish_now(topic: str, *args: Any, **kwargs: Any) -> AsyncResult[Any]: ...
def subscribe(topic: str, task: Task[Any, Any]) -> None: ...
def unsubscribe(topic: str, task: Task[Any, Any]) -> None: ...
